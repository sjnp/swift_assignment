// HW19: Nested types 
//=================================================================================================================
print("=============== Nested types in action ===============")
class Ingredient {
    enum Protein: Int {
        case chicken = 80, meat = 140, pork = 120, fish = 180
    }
    struct Fiber {
        enum Vegetable: Int {
            case lattuce = 5, onion = 8, tomato = 10
        }
        enum Herb: Int {
            case pepper = 3, rosemary = 5, parsley = 7
        }
        let vegetable: Vegetable, herb: Herb
    }
    let protein: Protein
    let fiber: Fiber
    var cost: Int {
        return protein.rawValue + 
            fiber.vegetable.rawValue +
            fiber.herb.rawValue
    }
    var description: String {
        return "\(protein) with \(fiber.vegetable) and \(fiber.herb) : \(cost) Baht."
    }
    init(protein: Protein, fiber: Fiber) {
        self.protein = protein
        self.fiber = fiber
    }
}

// Protein enum & Fiber struct is in the scope of Ingredient Class
// But only the struct that need to use 'Ingredient.Fiber()'
let a = Ingredient(protein: .chicken, fiber: Ingredient.Fiber(vegetable: .lattuce, herb: .pepper))

print(a.description)   // chicken with lattuce and pepper : 88 Baht.

print("=============== Referring to nested types ===============")
let costOfPepper = a.fiber.herb.rawValue
let costOfLattuce = Ingredient.Fiber.Vegetable.lattuce.rawValue
let costOfChicken = Ingredient.Protein.chicken.rawValue
print("cost: \(costOfChicken + costOfLattuce + costOfPepper)")

print("=============== Class within class ===============")
class UnrelatedClass {
    var unrelatedInt = 0
    deinit {
        print("deinit unrelated obj")
    }
}
class OutsideClass {
    deinit {
        print("deinit outside obj")
    }
    class InsideClass: UnrelatedClass {
        var insideInt = 0
        deinit {
            print("deinit inside obj")
        }
    }
    var insideObj: InsideClass? = InsideClass()
}

var b: OutsideClass? = OutsideClass()
b = nil
// deinit outside obj
// deinit inside obj
// deinit unrelated obj

class First {
    var firstVal = Second()
    class Second {
        var secondVal = Third()
        class Third {
            var thirdVal = Forth()
            class Forth {
                var forthVal = Fifth()
                class Fifth {
                    var fifthVal = Sixth()
                    class Sixth {
                        var sixthVal = Seventh()
                        class Seventh {
                            var seventhVal = Eighth()
                            class Eighth {
                                var eighthVal = Ninth() 
                                class Ninth {
                                    var ninthVal = Tenth()
                                    class Tenth {
                                        var tenthVal = Eleventh()
                                        class Eleventh {
                                            var eleventhVal = 11
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

var c = First()
print(c.firstVal.secondVal.thirdVal.forthVal.fifthVal
    .sixthVal.seventhVal.eighthVal.ninthVal.tenthVal
    .eleventhVal)   // 11

// It seems like there are no hard limit on how far you can nest it

print("=============== Class within struct ===============")
struct OutsideStruct {
    var insideObj = InsideClass()
    class InsideClass {
        var insideVal = 0
    }
}
struct FirstStruct {
    var firstStructVal = FirstClass()
    class FirstClass {
        var firstClassVal = SecondStruct()
        struct SecondStruct {
            var secondStructVal = SecondClass()
            class SecondClass {
                var secondClassVal = 2
            }
        }
    }
}
var d = OutsideStruct()
print(d.insideObj.insideVal) //0

var e = FirstStruct()
print(e.firstStructVal.firstClassVal.secondStructVal.secondClassVal)

print("=============== Struct/Class within enum ===============")
enum Choice {
    class Number {
        var value: Int 
        init(_ value: Int) { self.value = value }
    }
    //case first = Number(1)
    // Error: raw value for enum case must be literal

    //var firstObj = Number(1)
    // enums must not contain stored properties
}
// The compiler is passed but you cant actually access the class within enum :/

print("=============== Struct within struct ===============")
struct AStruct {
    var aStructVal = BStruct()
    struct BStruct {
        var bStructVal = CStruct()
        struct CStruct {
            var cStructVal = 3
        }
    }
}
let f = AStruct()
print(f.aStructVal.bStructVal.cStructVal) //3
// This seems to work the same way as class within class :)